#
# Autogenerated by Sandesh Compiler (1.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

from pysandesh.Thrift import TType, TMessageType, TException

from pysandesh.transport import TTransport
from pysandesh.protocol import TBinaryProtocol, TProtocol
try:
  from pysandesh.protocol import fastbinary
except:
  fastbinary = None

import cStringIO
import uuid
import netaddr
from sys import getsizeof
from itertools import chain
import bottle
from pysandesh import sandesh_base
from pysandesh.sandesh_http import SandeshHttp
from pysandesh.sandesh_uve import SandeshUVETypeMaps
from pysandesh.util import UTCTimestampUsec, UTCTimestampUsecToString
from pysandesh import util
from pysandesh.gen_py.sandesh.constants import *



class DependencyTrackerResource(object):
  """
  Definitions of traces generated by config daemons

  Attributes:
   - obj_type
   - obj_keys
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'obj_type', None, None, ), # 1
    (2, TType.LIST, 'obj_keys', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, obj_type=None, obj_keys=None,):
    self.obj_type = obj_type
    self.obj_keys = obj_keys

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.obj_type) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.obj_keys = []
          (length, _etype3, _size0) = iprot.readListBegin()
          read_cnt += length
          for _i4 in xrange(_size0):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem5) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.obj_keys.append(_elem5)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.obj_type is not None:
      annotations = {}
      if oprot.writeFieldBegin('obj_type', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.obj_type) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.obj_keys is not None:
      annotations = {}
      if oprot.writeFieldBegin('obj_keys', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.obj_keys)) < 0: return -1
      for iter6 in self.obj_keys:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter6) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.obj_type is not None:
      log_str.write('obj_type = ')
      log_str.write(self.obj_type)
      log_str.write('  ')
    if self.obj_keys is not None:
      log_str.write('obj_keys = ')
      log_str.write('[ ')
      for iter7 in self.obj_keys:
        log_str.write(iter7)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.obj_type is not None:
      size += getsizeof(self.obj_type)
    if self.obj_keys is not None:
      size += getsizeof(self.obj_keys)
      size += sum(map(getsizeof, self.obj_keys))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessageBusNotifyTrace(sandesh_base.SandeshTrace):

  thrift_spec = None

  def __init__(self, request_id=None, operation=None, uuid=None, fq_name=None, dependency_tracker_resources=None, error=None, file=None, line=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshTrace.__init__(self, type=SandeshType.TRACE)
    self.request_id = request_id
    self.operation = operation
    self.uuid = uuid
    self.fq_name = fq_name
    self.dependency_tracker_resources = dependency_tracker_resources
    self.error = error
    self.file = file
    self.line = line
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3606097504
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.request_id is not None:
      log_str.write(self.request_id)
      log_str.write('  ')
    if self.operation is not None:
      log_str.write(self.operation)
      log_str.write('  ')
    if self.uuid is not None:
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write(self.fq_name)
      log_str.write('  ')
    if self.dependency_tracker_resources is not None:
      log_str.write('[ ')
      for iter8 in self.dependency_tracker_resources:
        log_str.write('<<  ')
        log_str.write(iter8.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.error is not None:
      log_str.write(self.error)
      log_str.write('  ')
    if self.file is not None:
      log_str.write(self.file)
      log_str.write('  ')
    if self.line is not None:
      log_str.write(str(self.line))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.request_id) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.operation) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          (length, self.fq_name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.dependency_tracker_resources = []
          (length, _etype12, _size9) = iprot.readListBegin()
          read_cnt += length
          for _i13 in xrange(_size9):
            _elem14 = DependencyTrackerResource()
            read_cnt += _elem14.read(iprot)
            self.dependency_tracker_resources.append(_elem14)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.error) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == -32768:
        if ftype == TType.STRING:
          (length, self.file) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == -32767:
        if ftype == TType.I32:
          (length, self.line) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.file is not None:
      annotations = {}
      if oprot.writeFieldBegin('file', TType.STRING, -32768, annotations) < 0: return -1
      if oprot.writeString(self.file) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.line is not None:
      annotations = {}
      if oprot.writeFieldBegin('line', TType.I32, -32767, annotations) < 0: return -1
      if oprot.writeI32(self.line) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.request_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('request_id', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.request_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.operation is not None:
      annotations = {}
      if oprot.writeFieldBegin('operation', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.operation) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.STRING, 4, annotations) < 0: return -1
      if oprot.writeString(self.fq_name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.dependency_tracker_resources is not None:
      annotations = {}
      if oprot.writeFieldBegin('dependency_tracker_resources', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.dependency_tracker_resources)) < 0: return -1
      for iter15 in self.dependency_tracker_resources:
        if iter15.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.error is not None:
      annotations = {}
      if oprot.writeFieldBegin('error', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.error) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.file != other.file:
      return False
    if self.line != other.line:
      return False
    if self.request_id != other.request_id:
      return False
    if self.operation != other.operation:
      return False
    if self.uuid != other.uuid:
      return False
    if self.fq_name != other.fq_name:
      return False
    if self.dependency_tracker_resources != other.dependency_tracker_resources:
      return False
    if self.error != other.error:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.request_id is not None:
      size += getsizeof(self.request_id)
    if self.operation is not None:
      size += getsizeof(self.operation)
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
    if self.dependency_tracker_resources is not None:
      size += getsizeof(self.dependency_tracker_resources)
      size += sum(map(getsizeof, self.dependency_tracker_resources))
    if self.error is not None:
      size += getsizeof(self.error)
    if self.file is not None:
      size += getsizeof(self.file)
    if self.line is not None:
      size += getsizeof(self.line)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


_SANDESH_REQUEST_LIST = [
]


_SANDESH_UVE_LIST = [
]


_SANDESH_ALARM_LIST = [
]
